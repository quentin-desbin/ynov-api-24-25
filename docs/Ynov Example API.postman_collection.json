{
	"info": {
		"_postman_id": "fb53f546-68c9-43c7-ad3c-7621f948e58a",
		"name": "Ynov Example API",
		"description": "This collection is about an API developed with express during the \"API\" module at Ynov.\n\nThe API is in REST format, and respect guidelines.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15297108"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "All users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortDir",
									"value": "DESC",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "age",
									"disabled": true
								}
							]
						},
						"description": "The endpoint retrieves a list of users.\n\n### Request\n\nWe can sort the users by any column by providing the optional `sortBy` query parameter and set any column from `[id, name, age]`  \nIt can be combined with the optional `sortDir` query paremeter to precise the order. Valid values are `[ASC, DESC]` default value is ASC.\n\n### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"success\": {boolean},\n    \"data\": [\n        {\n            \"id\": {number},\n            \"name\": \"{string}\",\n            \"age\": {number}\n        }\n    ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"demo\",\n    \"password\": \"example\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users"
							]
						},
						"description": "The endpoint retrieves a list of users.\n\n### Request\n\nWe can sort the users by any column by providing the optional `sortBy` query parameter and set any column from `[id, name, age]`  \nIt can be combined with the optional `sortDir` query paremeter to precise the order. Valid values are `[ASC, DESC]` default value is ASC.\n\n### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"success\": {boolean},\n    \"data\": [\n        {\n            \"id\": {number},\n            \"name\": \"{string}\",\n            \"age\": {number}\n        }\n    ]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "User by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"1"
							]
						},
						"description": "The endpoint retrieves a single user by its id. Returns 200 with json or 404 when user not found.\n\n### Response\n\nThe response is in JSON format with the following schema:\n\n**200**\n\n``` json\n{\n    \"id\": {number},\n    \"name\": \"{string}\",\n    \"age\": {number}\n}\n\n ```\n\n**404**\n\n``` json\n{\n    \"success\": false,\n    \"message\": \"User not found\"\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "User by id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/users/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"users",
								"1"
							]
						},
						"description": "The endpoint delete a single user by its id. Returns 200 with json or 404 when user not found.\n\n### Response\n\nThe response is in JSON format with the following schema:\n\n**200**\n\n``` json\n{\n    \"success\": true,\n    \"message\": \"User deleted\"\n}\n\n ```\n\n**404**\n\n``` json\n{\n    \"success\": false,\n    \"message\": \"User not found\"\n}\n\n ```"
					},
					"response": []
				}
			]
		}
	]
}